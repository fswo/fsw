{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction fsw is a coroutine component that we can use to quickly develop a high performance server, etc. Coroutine create a coroutine and run it immediately: long Coroutine::create(coroutine_func_t fn, void * args) get the currently running coroutine: static fsw::Coroutine *fsw::Coroutine::get_current() swap out the current coroutine: void fsw::Coroutine::yield() swap in the specified coroutine: void fsw::Coroutine::resume() delayed execution of tasks: void fsw::Coroutine::defer(coroutine_func_t _fn, void *_args = (void *)nullptr) let the current coroutine sleep: static int fsw::Coroutine::sleep(double seconds) Channel create a channel: fsw::coroutine::Channel::Channel(size_t _capacity = 1UL) push the data into the channel: bool fsw::coroutine::Channel::push(void *data, double timeout = (-1.0)) pop the data from the channel: void *fsw::coroutine::Channel::pop(double timeout = (-1.0)) TCP Server create an TCP server: Server::Server(char * host, int port) start the TCP Server: bool Server::start() set the handler to handle the connection void Server::set_handler(string pattern, on_accept_handler fn) HTTP Server create an HTTP server: fsw::coroutine::http::Server::Server(char *host, int port) start the HTTP Server: bool fsw::coroutine::http::Server::start() set the router: void fsw::coroutine::http::Server::set_handler(std::string pattern, on_accept_handler fn)","title":"Introduction"},{"location":"#introduction","text":"fsw is a coroutine component that we can use to quickly develop a high performance server, etc.","title":"Introduction"},{"location":"#coroutine","text":"create a coroutine and run it immediately: long Coroutine::create(coroutine_func_t fn, void * args) get the currently running coroutine: static fsw::Coroutine *fsw::Coroutine::get_current() swap out the current coroutine: void fsw::Coroutine::yield() swap in the specified coroutine: void fsw::Coroutine::resume() delayed execution of tasks: void fsw::Coroutine::defer(coroutine_func_t _fn, void *_args = (void *)nullptr) let the current coroutine sleep: static int fsw::Coroutine::sleep(double seconds)","title":"Coroutine"},{"location":"#channel","text":"create a channel: fsw::coroutine::Channel::Channel(size_t _capacity = 1UL) push the data into the channel: bool fsw::coroutine::Channel::push(void *data, double timeout = (-1.0)) pop the data from the channel: void *fsw::coroutine::Channel::pop(double timeout = (-1.0))","title":"Channel"},{"location":"#tcp-server","text":"create an TCP server: Server::Server(char * host, int port) start the TCP Server: bool Server::start() set the handler to handle the connection void Server::set_handler(string pattern, on_accept_handler fn)","title":"TCP Server"},{"location":"#http-server","text":"create an HTTP server: fsw::coroutine::http::Server::Server(char *host, int port) start the HTTP Server: bool fsw::coroutine::http::Server::start() set the router: void fsw::coroutine::http::Server::set_handler(std::string pattern, on_accept_handler fn)","title":"HTTP Server"}]}