{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"About fsw is a coroutine component that we can use to quickly develop a high performance server, etc.","title":"About"},{"location":"#about","text":"fsw is a coroutine component that we can use to quickly develop a high performance server, etc.","title":"About"},{"location":"channel/","text":"Channel create a channel: fsw::coroutine::Channel::Channel(size_t _capacity = 1UL) push the data into the channel: bool fsw::coroutine::Channel::push(void *data, double timeout = (-1.0)) pop the data from the channel: void *fsw::coroutine::Channel::pop(double timeout = (-1.0))","title":"Channel"},{"location":"channel/#channel","text":"create a channel: fsw::coroutine::Channel::Channel(size_t _capacity = 1UL) push the data into the channel: bool fsw::coroutine::Channel::push(void *data, double timeout = (-1.0)) pop the data from the channel: void *fsw::coroutine::Channel::pop(double timeout = (-1.0))","title":"Channel"},{"location":"coroutine/","text":"Coroutine create create a coroutine and run it immediately: long Coroutine::create(coroutine_func_t fn, void * args) #include \"fsw/coroutine.h\" using fsw::Coroutine; int main(int argc, char const *argv[]) { fsw_event_init(); Coroutine::create([](void *arg) { std::cout << \"coroutine 1\" << std::endl; }); Coroutine::create([](void *arg) { std::cout << \"coroutine 2\" << std::endl; }); Coroutine::create([](void *arg) { std::cout << \"coroutine 3\" << std::endl; }); fsw_event_wait(); return 0; } get_current get the currently running coroutine: static fsw::Coroutine *fsw::Coroutine::get_current() #include \"fsw/coroutine.h\" using fsw::Coroutine; int main(int argc, char const *argv[]) { fsw_event_init(); Coroutine::create([](void *arg) { Coroutine *co = Coroutine::get_current(); }); fsw_event_wait(); return 0; } yield swap out the current coroutine: void fsw::Coroutine::yield() #include \"fsw/coroutine.h\" using fsw::Coroutine; int main(int argc, char const *argv[]) { fsw_event_init(); long cid = Coroutine::create([](void *arg) { Coroutine *co = Coroutine::get_current(); std::cout << 1 << std::endl; co->yield(); std::cout << 3 << std::endl; }); Coroutine::create([](void *arg) { long cid = (long)(uintptr_t)arg; Coroutine *co = Coroutine::get_by_cid(cid); std::cout << 2 << std::endl; co->resume(); std::cout << 4 << std::endl; }, (void*)(uintptr_t)cid); fsw_event_wait(); return 0; } it will print: 1 2 3 4 resume swap in the specified coroutine: void fsw::Coroutine::resume() #include \"fsw/coroutine.h\" using fsw::Coroutine; int main(int argc, char const *argv[]) { fsw_event_init(); long cid = Coroutine::create([](void *arg) { Coroutine *co = Coroutine::get_current(); std::cout << 1 << std::endl; co->yield(); std::cout << 3 << std::endl; }); Coroutine::create([](void *arg) { long cid = (long)(uintptr_t)arg; Coroutine *co = Coroutine::get_by_cid(cid); std::cout << 2 << std::endl; co->resume(); std::cout << 4 << std::endl; }, (void*)(uintptr_t)cid); fsw_event_wait(); return 0; } it will print: 1 2 3 4 defer delayed execution of tasks: void fsw::Coroutine::defer(coroutine_func_t _fn, void *_args = (void *)nullptr) #include \"fsw/coroutine.h\" using fsw::Coroutine; int main(int argc, char const *argv[]) { fsw_event_init(); long cid = Coroutine::create([](void *arg) { Coroutine *co = Coroutine::get_current(); co->defer([](void *arg) { std::cout << 1 << std::endl; }); co->defer([](void *arg) { std::cout << 2 << std::endl; }); co->defer([](void *arg) { std::cout << 3 << std::endl; }); }); fsw_event_wait(); return 0; } it will print: 3 2 1 sleep let the current coroutine sleep: static int fsw::Coroutine::sleep(double seconds) #include \"fsw/coroutine.h\" #include \"fsw/timer.h\" using fsw::Coroutine; using fsw::Timer; int main(int argc, char const *argv[]) { fsw_event_init(); long cid = Coroutine::create([](void *arg) { std::cout << 1 << std::endl; Coroutine::sleep(2 * Timer::MILLI_SECOND); std::cout << 2 << std::endl; }); Coroutine::create([](void *arg) { std::cout << 3 << std::endl; Coroutine::sleep(1 * Timer::MILLI_SECOND); std::cout << 4 << std::endl; }, (void*)(uintptr_t)cid); fsw_event_wait(); return 0; } it will print: 1 3 4 2","title":"Coroutine"},{"location":"coroutine/#coroutine","text":"","title":"Coroutine"},{"location":"coroutine/#create","text":"create a coroutine and run it immediately: long Coroutine::create(coroutine_func_t fn, void * args) #include \"fsw/coroutine.h\" using fsw::Coroutine; int main(int argc, char const *argv[]) { fsw_event_init(); Coroutine::create([](void *arg) { std::cout << \"coroutine 1\" << std::endl; }); Coroutine::create([](void *arg) { std::cout << \"coroutine 2\" << std::endl; }); Coroutine::create([](void *arg) { std::cout << \"coroutine 3\" << std::endl; }); fsw_event_wait(); return 0; }","title":"create"},{"location":"coroutine/#get_current","text":"get the currently running coroutine: static fsw::Coroutine *fsw::Coroutine::get_current() #include \"fsw/coroutine.h\" using fsw::Coroutine; int main(int argc, char const *argv[]) { fsw_event_init(); Coroutine::create([](void *arg) { Coroutine *co = Coroutine::get_current(); }); fsw_event_wait(); return 0; }","title":"get_current"},{"location":"coroutine/#yield","text":"swap out the current coroutine: void fsw::Coroutine::yield() #include \"fsw/coroutine.h\" using fsw::Coroutine; int main(int argc, char const *argv[]) { fsw_event_init(); long cid = Coroutine::create([](void *arg) { Coroutine *co = Coroutine::get_current(); std::cout << 1 << std::endl; co->yield(); std::cout << 3 << std::endl; }); Coroutine::create([](void *arg) { long cid = (long)(uintptr_t)arg; Coroutine *co = Coroutine::get_by_cid(cid); std::cout << 2 << std::endl; co->resume(); std::cout << 4 << std::endl; }, (void*)(uintptr_t)cid); fsw_event_wait(); return 0; } it will print: 1 2 3 4","title":"yield"},{"location":"coroutine/#resume","text":"swap in the specified coroutine: void fsw::Coroutine::resume() #include \"fsw/coroutine.h\" using fsw::Coroutine; int main(int argc, char const *argv[]) { fsw_event_init(); long cid = Coroutine::create([](void *arg) { Coroutine *co = Coroutine::get_current(); std::cout << 1 << std::endl; co->yield(); std::cout << 3 << std::endl; }); Coroutine::create([](void *arg) { long cid = (long)(uintptr_t)arg; Coroutine *co = Coroutine::get_by_cid(cid); std::cout << 2 << std::endl; co->resume(); std::cout << 4 << std::endl; }, (void*)(uintptr_t)cid); fsw_event_wait(); return 0; } it will print: 1 2 3 4","title":"resume"},{"location":"coroutine/#defer","text":"delayed execution of tasks: void fsw::Coroutine::defer(coroutine_func_t _fn, void *_args = (void *)nullptr) #include \"fsw/coroutine.h\" using fsw::Coroutine; int main(int argc, char const *argv[]) { fsw_event_init(); long cid = Coroutine::create([](void *arg) { Coroutine *co = Coroutine::get_current(); co->defer([](void *arg) { std::cout << 1 << std::endl; }); co->defer([](void *arg) { std::cout << 2 << std::endl; }); co->defer([](void *arg) { std::cout << 3 << std::endl; }); }); fsw_event_wait(); return 0; } it will print: 3 2 1","title":"defer"},{"location":"coroutine/#sleep","text":"let the current coroutine sleep: static int fsw::Coroutine::sleep(double seconds) #include \"fsw/coroutine.h\" #include \"fsw/timer.h\" using fsw::Coroutine; using fsw::Timer; int main(int argc, char const *argv[]) { fsw_event_init(); long cid = Coroutine::create([](void *arg) { std::cout << 1 << std::endl; Coroutine::sleep(2 * Timer::MILLI_SECOND); std::cout << 2 << std::endl; }); Coroutine::create([](void *arg) { std::cout << 3 << std::endl; Coroutine::sleep(1 * Timer::MILLI_SECOND); std::cout << 4 << std::endl; }, (void*)(uintptr_t)cid); fsw_event_wait(); return 0; } it will print: 1 3 4 2","title":"sleep"},{"location":"getting-started/","text":"Getting-Started Build Build fsw cmake . && make && make install A HTTP Server example #include \"fsw/coroutine_http.h\" #include \"fsw/coroutine_http_server.h\" #include \"fsw/coroutine.h\" #include \"fsw/buffer.h\" using fsw::Coroutine; using fsw::coroutine::http::Request; using fsw::coroutine::http::Response; using fsw::coroutine::http::Server; using fsw::Buffer; void handler(Request *request, Response *response) { char response_body[] = \"hello world\"; Buffer buffer(1024); buffer.append(response_body, sizeof(response_body) - 1); response->set_header(\"Content-Type\", \"text/html\"); response->end(&buffer); return; } int main(int argc, char const *argv[]) { fsw_event_init(); Coroutine::create([](void *arg) { char ip[] = \"127.0.0.1\"; Server *serv = new Server(ip, 80); serv->set_handler(\"/index\", handler); serv->start(); }); fsw_event_wait(); return 0; } Build the example ~/codeDir/cppCode/fsw/example # g++ server.cc -lfsw Pressure test The machine configuration is one cpu core, 2G memory: ab -c 1000 -n 1000000 -k 127.0.0.1/index Concurrency Level: 1000 Time taken for tests: 35.721 seconds Complete requests: 1000000 Failed requests: 0 Keep-Alive requests: 1000000 Total transferred: 101000000 bytes HTML transferred: 13000000 bytes Requests per second: 27994.62 [#/sec] (mean) Time per request: 35.721 [ms] (mean) Time per request: 0.036 [ms] (mean, across all concurrent requests) Transfer rate: 2761.19 [Kbytes/sec] received","title":"Getting Started"},{"location":"getting-started/#getting-started","text":"","title":"Getting-Started"},{"location":"getting-started/#build","text":"","title":"Build"},{"location":"getting-started/#build-fsw","text":"cmake . && make && make install","title":"Build fsw"},{"location":"getting-started/#a-http-server-example","text":"#include \"fsw/coroutine_http.h\" #include \"fsw/coroutine_http_server.h\" #include \"fsw/coroutine.h\" #include \"fsw/buffer.h\" using fsw::Coroutine; using fsw::coroutine::http::Request; using fsw::coroutine::http::Response; using fsw::coroutine::http::Server; using fsw::Buffer; void handler(Request *request, Response *response) { char response_body[] = \"hello world\"; Buffer buffer(1024); buffer.append(response_body, sizeof(response_body) - 1); response->set_header(\"Content-Type\", \"text/html\"); response->end(&buffer); return; } int main(int argc, char const *argv[]) { fsw_event_init(); Coroutine::create([](void *arg) { char ip[] = \"127.0.0.1\"; Server *serv = new Server(ip, 80); serv->set_handler(\"/index\", handler); serv->start(); }); fsw_event_wait(); return 0; }","title":"A HTTP Server example"},{"location":"getting-started/#build-the-example","text":"~/codeDir/cppCode/fsw/example # g++ server.cc -lfsw","title":"Build the example"},{"location":"getting-started/#pressure-test","text":"The machine configuration is one cpu core, 2G memory: ab -c 1000 -n 1000000 -k 127.0.0.1/index Concurrency Level: 1000 Time taken for tests: 35.721 seconds Complete requests: 1000000 Failed requests: 0 Keep-Alive requests: 1000000 Total transferred: 101000000 bytes HTML transferred: 13000000 bytes Requests per second: 27994.62 [#/sec] (mean) Time per request: 35.721 [ms] (mean) Time per request: 0.036 [ms] (mean, across all concurrent requests) Transfer rate: 2761.19 [Kbytes/sec] received","title":"Pressure test"},{"location":"http-server/","text":"HTTP Server create an HTTP server: fsw::coroutine::http::Server::Server(char *host, int port) start the HTTP Server: bool fsw::coroutine::http::Server::start() set the router: void fsw::coroutine::http::Server::set_handler(std::string pattern, on_accept_handler fn)","title":"HTTP Server"},{"location":"http-server/#http-server","text":"create an HTTP server: fsw::coroutine::http::Server::Server(char *host, int port) start the HTTP Server: bool fsw::coroutine::http::Server::start() set the router: void fsw::coroutine::http::Server::set_handler(std::string pattern, on_accept_handler fn)","title":"HTTP Server"},{"location":"tcp-server/","text":"TCP Server create an TCP server: Server::Server(char * host, int port) start the TCP Server: bool Server::start() set the handler to handle the connection void Server::set_handler(string pattern, on_accept_handler fn)","title":"TCP Server"},{"location":"tcp-server/#tcp-server","text":"create an TCP server: Server::Server(char * host, int port) start the TCP Server: bool Server::start() set the handler to handle the connection void Server::set_handler(string pattern, on_accept_handler fn)","title":"TCP Server"}]}