{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"About fsw is a coroutine component that we can use to quickly develop a high performance server, etc.","title":"About"},{"location":"#about","text":"fsw is a coroutine component that we can use to quickly develop a high performance server, etc.","title":"About"},{"location":"channel/","text":"Channel Create create a channel: fsw::coroutine::Channel::Channel(size_t _capacity = 1UL) #include \"fsw/coroutine_channel.h\" using fsw::coroutine::Channel; using fsw::coroutine::run; int main(int argc, char const *argv[]) { run([](void *args) { Channel *chan1 = new Channel(); Channel *chan2 = new Channel(2); }); return 0; } push push the data into the channel: bool fsw::coroutine::Channel::push(void *data, double timeout = (-1.0)) #include \"fsw/coroutine.h\" #include \"fsw/coroutine_channel.h\" using fsw::coroutine::Channel; using fsw::Coroutine; using fsw::coroutine::run; int main(int argc, char const *argv[]) { run([](void *args) { Channel *chan = new Channel(); Coroutine::create([](void *arg) { void *data; Channel *chan = (Channel *)arg; data = chan->pop(); std::cout << *(std::string *)data << std::endl; }, (void *)chan); Coroutine::create([](void *arg) { bool ret; std::string data = \"hello world\"; Channel *chan = (Channel *)arg; ret = chan->push(&data); std::cout << ret << std::endl; }, (void *)chan); delete chan; }); } it will print: hello world 1 pop pop the data from the channel: void *fsw::coroutine::Channel::pop(double timeout = (-1.0))","title":"Channel"},{"location":"channel/#channel","text":"","title":"Channel"},{"location":"channel/#create","text":"create a channel: fsw::coroutine::Channel::Channel(size_t _capacity = 1UL) #include \"fsw/coroutine_channel.h\" using fsw::coroutine::Channel; using fsw::coroutine::run; int main(int argc, char const *argv[]) { run([](void *args) { Channel *chan1 = new Channel(); Channel *chan2 = new Channel(2); }); return 0; }","title":"Create"},{"location":"channel/#push","text":"push the data into the channel: bool fsw::coroutine::Channel::push(void *data, double timeout = (-1.0)) #include \"fsw/coroutine.h\" #include \"fsw/coroutine_channel.h\" using fsw::coroutine::Channel; using fsw::Coroutine; using fsw::coroutine::run; int main(int argc, char const *argv[]) { run([](void *args) { Channel *chan = new Channel(); Coroutine::create([](void *arg) { void *data; Channel *chan = (Channel *)arg; data = chan->pop(); std::cout << *(std::string *)data << std::endl; }, (void *)chan); Coroutine::create([](void *arg) { bool ret; std::string data = \"hello world\"; Channel *chan = (Channel *)arg; ret = chan->push(&data); std::cout << ret << std::endl; }, (void *)chan); delete chan; }); } it will print: hello world 1","title":"push"},{"location":"channel/#pop","text":"pop the data from the channel: void *fsw::coroutine::Channel::pop(double timeout = (-1.0))","title":"pop"},{"location":"coroutine/","text":"Coroutine create create a coroutine and run it immediately: long Coroutine::create(coroutine_func_t fn, void * args) #include \"fsw/coroutine.h\" using fsw::Coroutine; using fsw::coroutine::run; int main(int argc, char const *argv[]) { run([](void *args) { Coroutine::create([](void *arg) { std::cout << \"coroutine 1\" << std::endl; }); Coroutine::create([](void *arg) { std::cout << \"coroutine 2\" << std::endl; }); Coroutine::create([](void *arg) { std::cout << \"coroutine 3\" << std::endl; }); }); return 0; } get_current get the currently running coroutine: static fsw::Coroutine *fsw::Coroutine::get_current() #include \"fsw/coroutine.h\" using fsw::Coroutine; using fsw::coroutine::run; int main(int argc, char const *argv[]) { run([](void *args) { Coroutine::create([](void *arg) { Coroutine *co = Coroutine::get_current(); }); }); return 0; } yield swap out the current coroutine: static void fsw::Coroutine::yield() #include \"fsw/coroutine.h\" using fsw::Coroutine; using fsw::coroutine::run; int main(int argc, char const *argv[]) { run([](void *args) { long cid = Coroutine::create([](void *arg) { Coroutine *co = Coroutine::get_current(); std::cout << 1 << std::endl; co->yield(); std::cout << 3 << std::endl; }); Coroutine::create([](void *arg) { long cid = (long)(uintptr_t)arg; std::cout << 2 << std::endl; Coroutine::resume(cid); std::cout << 4 << std::endl; }, (void*)(uintptr_t)cid); }); return 0; } it will print: 1 2 3 4 resume swap in the specified coroutine: static void resume(long cid) #include \"fsw/coroutine.h\" using fsw::Coroutine; using fsw::coroutine::run; int main(int argc, char const *argv[]) { run([](void *args) { long cid = Coroutine::create([](void *arg) { Coroutine *co = Coroutine::get_current(); std::cout << 1 << std::endl; co->yield(); std::cout << 3 << std::endl; }); Coroutine::create([](void *arg) { long cid = (long)(uintptr_t)arg; std::cout << 2 << std::endl; Coroutine::resume(cid); std::cout << 4 << std::endl; }, (void*)(uintptr_t)cid); }); return 0; } it will print: 1 2 3 4 static void fsw::Coroutine::resume(fsw::Coroutine *co) #include \"fsw/coroutine.h\" using fsw::Coroutine; using fsw::coroutine::run; int main(int argc, char const *argv[]) { run([](void *args) { long cid = Coroutine::create([](void *arg) { Coroutine *co = Coroutine::get_current(); std::cout << 1 << std::endl; co->yield(); std::cout << 3 << std::endl; }); Coroutine::create([](void *arg) { long cid = (long)(uintptr_t)arg; Coroutine *co = Coroutine::get_by_cid(cid); std::cout << 2 << std::endl; Coroutine::resume(co); std::cout << 4 << std::endl; }, (void*)(uintptr_t)cid); }); return 0; } it will print: 1 2 3 4 notice: if you have already got a pointer to the coroutine, then please call directly resume(fsw::Coroutine *co) instead of resume(long cid), which will reduce the lookup of the map. defer delayed execution of tasks: static void defer(coroutine_func_t _fn, void* _args = nullptr) #include \"fsw/coroutine.h\" using fsw::Coroutine; using fsw::coroutine::run; int main(int argc, char const *argv[]) { run([](void *args) { long cid = Coroutine::create([](void *arg) { Coroutine::defer([](void *arg) { std::cout << 1 << std::endl; }); Coroutine::defer([](void *arg) { std::cout << 2 << std::endl; }); Coroutine::defer([](void *arg) { std::cout << 3 << std::endl; }); }); }); return 0; } it will print: 3 2 1 sleep let the current coroutine sleep: static int fsw::Coroutine::sleep(double seconds) #include \"fsw/coroutine.h\" #include \"fsw/timer.h\" using fsw::Coroutine; using fsw::Timer; using fsw::coroutine::run; int main(int argc, char const *argv[]) { run([](void *args) { long cid = Coroutine::create([](void *arg) { std::cout << 1 << std::endl; Coroutine::sleep(2 * Timer::MILLI_SECOND); std::cout << 2 << std::endl; }); Coroutine::create([](void *arg) { std::cout << 3 << std::endl; Coroutine::sleep(1 * Timer::MILLI_SECOND); std::cout << 4 << std::endl; }, (void*)(uintptr_t)cid); }); return 0; } it will print: 1 3 4 2","title":"Coroutine"},{"location":"coroutine/#coroutine","text":"","title":"Coroutine"},{"location":"coroutine/#create","text":"create a coroutine and run it immediately: long Coroutine::create(coroutine_func_t fn, void * args) #include \"fsw/coroutine.h\" using fsw::Coroutine; using fsw::coroutine::run; int main(int argc, char const *argv[]) { run([](void *args) { Coroutine::create([](void *arg) { std::cout << \"coroutine 1\" << std::endl; }); Coroutine::create([](void *arg) { std::cout << \"coroutine 2\" << std::endl; }); Coroutine::create([](void *arg) { std::cout << \"coroutine 3\" << std::endl; }); }); return 0; }","title":"create"},{"location":"coroutine/#get_current","text":"get the currently running coroutine: static fsw::Coroutine *fsw::Coroutine::get_current() #include \"fsw/coroutine.h\" using fsw::Coroutine; using fsw::coroutine::run; int main(int argc, char const *argv[]) { run([](void *args) { Coroutine::create([](void *arg) { Coroutine *co = Coroutine::get_current(); }); }); return 0; }","title":"get_current"},{"location":"coroutine/#yield","text":"swap out the current coroutine: static void fsw::Coroutine::yield() #include \"fsw/coroutine.h\" using fsw::Coroutine; using fsw::coroutine::run; int main(int argc, char const *argv[]) { run([](void *args) { long cid = Coroutine::create([](void *arg) { Coroutine *co = Coroutine::get_current(); std::cout << 1 << std::endl; co->yield(); std::cout << 3 << std::endl; }); Coroutine::create([](void *arg) { long cid = (long)(uintptr_t)arg; std::cout << 2 << std::endl; Coroutine::resume(cid); std::cout << 4 << std::endl; }, (void*)(uintptr_t)cid); }); return 0; } it will print: 1 2 3 4","title":"yield"},{"location":"coroutine/#resume","text":"swap in the specified coroutine: static void resume(long cid) #include \"fsw/coroutine.h\" using fsw::Coroutine; using fsw::coroutine::run; int main(int argc, char const *argv[]) { run([](void *args) { long cid = Coroutine::create([](void *arg) { Coroutine *co = Coroutine::get_current(); std::cout << 1 << std::endl; co->yield(); std::cout << 3 << std::endl; }); Coroutine::create([](void *arg) { long cid = (long)(uintptr_t)arg; std::cout << 2 << std::endl; Coroutine::resume(cid); std::cout << 4 << std::endl; }, (void*)(uintptr_t)cid); }); return 0; } it will print: 1 2 3 4 static void fsw::Coroutine::resume(fsw::Coroutine *co) #include \"fsw/coroutine.h\" using fsw::Coroutine; using fsw::coroutine::run; int main(int argc, char const *argv[]) { run([](void *args) { long cid = Coroutine::create([](void *arg) { Coroutine *co = Coroutine::get_current(); std::cout << 1 << std::endl; co->yield(); std::cout << 3 << std::endl; }); Coroutine::create([](void *arg) { long cid = (long)(uintptr_t)arg; Coroutine *co = Coroutine::get_by_cid(cid); std::cout << 2 << std::endl; Coroutine::resume(co); std::cout << 4 << std::endl; }, (void*)(uintptr_t)cid); }); return 0; } it will print: 1 2 3 4 notice: if you have already got a pointer to the coroutine, then please call directly resume(fsw::Coroutine *co) instead of resume(long cid), which will reduce the lookup of the map.","title":"resume"},{"location":"coroutine/#defer","text":"delayed execution of tasks: static void defer(coroutine_func_t _fn, void* _args = nullptr) #include \"fsw/coroutine.h\" using fsw::Coroutine; using fsw::coroutine::run; int main(int argc, char const *argv[]) { run([](void *args) { long cid = Coroutine::create([](void *arg) { Coroutine::defer([](void *arg) { std::cout << 1 << std::endl; }); Coroutine::defer([](void *arg) { std::cout << 2 << std::endl; }); Coroutine::defer([](void *arg) { std::cout << 3 << std::endl; }); }); }); return 0; } it will print: 3 2 1","title":"defer"},{"location":"coroutine/#sleep","text":"let the current coroutine sleep: static int fsw::Coroutine::sleep(double seconds) #include \"fsw/coroutine.h\" #include \"fsw/timer.h\" using fsw::Coroutine; using fsw::Timer; using fsw::coroutine::run; int main(int argc, char const *argv[]) { run([](void *args) { long cid = Coroutine::create([](void *arg) { std::cout << 1 << std::endl; Coroutine::sleep(2 * Timer::MILLI_SECOND); std::cout << 2 << std::endl; }); Coroutine::create([](void *arg) { std::cout << 3 << std::endl; Coroutine::sleep(1 * Timer::MILLI_SECOND); std::cout << 4 << std::endl; }, (void*)(uintptr_t)cid); }); return 0; } it will print: 1 3 4 2","title":"sleep"},{"location":"getting-started/","text":"Getting-Started Build Build fsw cmake . && make && make install A HTTP Server example #include \"fsw/coroutine_http.h\" #include \"fsw/coroutine_http_server.h\" #include \"fsw/coroutine.h\" #include \"fsw/buffer.h\" using fsw::Coroutine; using fsw::coroutine::http::Request; using fsw::coroutine::http::Response; using fsw::coroutine::http::Server; using fsw::Buffer; using fsw::coroutine::run; void handler(Request *request, Response *response) { char response_body[] = \"hello world\"; Buffer buffer(1024); buffer.append(response_body, sizeof(response_body) - 1); response->set_header(\"Content-Type\", \"text/html\"); response->end(&buffer); return; } int main(int argc, char const *argv[]) { run([](void *args) { char ip[] = \"127.0.0.1\"; Server *serv = new Server(ip, 80); serv->set_http_handler(\"/index\", handler); serv->start(); }); return 0; } Build the example ~/codeDir/cppCode/fsw/example # g++ server.cc -lfsw Pressure test The machine configuration is one cpu core, 2G memory: ab -c 1000 -n 1000000 -k 127.0.0.1/index Concurrency Level: 1000 Time taken for tests: 35.721 seconds Complete requests: 1000000 Failed requests: 0 Keep-Alive requests: 1000000 Total transferred: 101000000 bytes HTML transferred: 13000000 bytes Requests per second: 27994.62 [#/sec] (mean) Time per request: 35.721 [ms] (mean) Time per request: 0.036 [ms] (mean, across all concurrent requests) Transfer rate: 2761.19 [Kbytes/sec] received","title":"Getting Started"},{"location":"getting-started/#getting-started","text":"","title":"Getting-Started"},{"location":"getting-started/#build","text":"","title":"Build"},{"location":"getting-started/#build-fsw","text":"cmake . && make && make install","title":"Build fsw"},{"location":"getting-started/#a-http-server-example","text":"#include \"fsw/coroutine_http.h\" #include \"fsw/coroutine_http_server.h\" #include \"fsw/coroutine.h\" #include \"fsw/buffer.h\" using fsw::Coroutine; using fsw::coroutine::http::Request; using fsw::coroutine::http::Response; using fsw::coroutine::http::Server; using fsw::Buffer; using fsw::coroutine::run; void handler(Request *request, Response *response) { char response_body[] = \"hello world\"; Buffer buffer(1024); buffer.append(response_body, sizeof(response_body) - 1); response->set_header(\"Content-Type\", \"text/html\"); response->end(&buffer); return; } int main(int argc, char const *argv[]) { run([](void *args) { char ip[] = \"127.0.0.1\"; Server *serv = new Server(ip, 80); serv->set_http_handler(\"/index\", handler); serv->start(); }); return 0; }","title":"A HTTP Server example"},{"location":"getting-started/#build-the-example","text":"~/codeDir/cppCode/fsw/example # g++ server.cc -lfsw","title":"Build the example"},{"location":"getting-started/#pressure-test","text":"The machine configuration is one cpu core, 2G memory: ab -c 1000 -n 1000000 -k 127.0.0.1/index Concurrency Level: 1000 Time taken for tests: 35.721 seconds Complete requests: 1000000 Failed requests: 0 Keep-Alive requests: 1000000 Total transferred: 101000000 bytes HTML transferred: 13000000 bytes Requests per second: 27994.62 [#/sec] (mean) Time per request: 35.721 [ms] (mean) Time per request: 0.036 [ms] (mean, across all concurrent requests) Transfer rate: 2761.19 [Kbytes/sec] received","title":"Pressure test"},{"location":"http-server/","text":"HTTP Server create an HTTP server: fsw::coroutine::http::Server::Server(char *host, int port) start the HTTP Server: bool fsw::coroutine::http::Server::start() set the router: void fsw::coroutine::http::Server::set_http_handler(std::string pattern, on_accept_handler fn) #include \"fsw/coroutine_http.h\" #include \"fsw/coroutine_http_server.h\" #include \"fsw/coroutine.h\" #include \"fsw/buffer.h\" using fsw::Coroutine; using fsw::coroutine::http::Request; using fsw::coroutine::http::Response; using fsw::coroutine::http::Server; using fsw::Buffer; using fsw::coroutine::run; void handler(Request *request, Response *response) { char response_body[] = \"hello world\"; Buffer buffer(1024); buffer.append(response_body, sizeof(response_body) - 1); response->set_header(\"Content-Type\", \"text/html\"); response->end(&buffer); return; } int main(int argc, char const *argv[]) { run([](void *args) { char ip[] = \"127.0.0.1\"; Server *serv = new Server(ip, 80); serv->set_http_handler(\"/index\", handler); serv->start(); }); return 0; }","title":"HTTP Server"},{"location":"http-server/#http-server","text":"create an HTTP server: fsw::coroutine::http::Server::Server(char *host, int port) start the HTTP Server: bool fsw::coroutine::http::Server::start() set the router: void fsw::coroutine::http::Server::set_http_handler(std::string pattern, on_accept_handler fn) #include \"fsw/coroutine_http.h\" #include \"fsw/coroutine_http_server.h\" #include \"fsw/coroutine.h\" #include \"fsw/buffer.h\" using fsw::Coroutine; using fsw::coroutine::http::Request; using fsw::coroutine::http::Response; using fsw::coroutine::http::Server; using fsw::Buffer; using fsw::coroutine::run; void handler(Request *request, Response *response) { char response_body[] = \"hello world\"; Buffer buffer(1024); buffer.append(response_body, sizeof(response_body) - 1); response->set_header(\"Content-Type\", \"text/html\"); response->end(&buffer); return; } int main(int argc, char const *argv[]) { run([](void *args) { char ip[] = \"127.0.0.1\"; Server *serv = new Server(ip, 80); serv->set_http_handler(\"/index\", handler); serv->start(); }); return 0; }","title":"HTTP Server"},{"location":"tcp-server/","text":"TCP Server create an TCP server: Server::Server(char * host, int port) start the TCP Server: bool Server::start() set the handler to handle the connection void Server::set_handler(string pattern, on_accept_handler fn) #include \"fsw/coroutine_server.h\" #include \"fsw/coroutine.h\" using fsw::Coroutine; using fsw::coroutine::Server; using fsw::coroutine::Socket; using fsw::coroutine::run; char response_str[] = \"HTTP/1.1 200 OK\\r\\nContent-Type: text/html\\r\\nConnection: close\\r\\nContent-Length: 11\\r\\n\\r\\nhello world\\r\\n\"; void handler(void *args) { int ret; char buf[1024] = {0}; Socket *conn = (Socket *)args; ret = conn->recv(buf, sizeof(buf) - 1); if (ret < 0) { fswWarn(\"Error has occurred: (errno %d) %s\", errno, strerror(errno)); } buf[ret] = 0; ret = conn->send(response_str, sizeof(response_str) - 1); if (ret < 0) { fswWarn(\"Error has occurred: (errno %d) %s\", errno, strerror(errno)); } delete conn; } int main(int argc, char const *argv[]) { run([](void *arg) { char ip[] = \"127.0.0.1\"; Server *serv = new Server(ip, 80); serv->set_handler(handler); serv->start(); }); return 0; }","title":"TCP Server"},{"location":"tcp-server/#tcp-server","text":"create an TCP server: Server::Server(char * host, int port) start the TCP Server: bool Server::start() set the handler to handle the connection void Server::set_handler(string pattern, on_accept_handler fn) #include \"fsw/coroutine_server.h\" #include \"fsw/coroutine.h\" using fsw::Coroutine; using fsw::coroutine::Server; using fsw::coroutine::Socket; using fsw::coroutine::run; char response_str[] = \"HTTP/1.1 200 OK\\r\\nContent-Type: text/html\\r\\nConnection: close\\r\\nContent-Length: 11\\r\\n\\r\\nhello world\\r\\n\"; void handler(void *args) { int ret; char buf[1024] = {0}; Socket *conn = (Socket *)args; ret = conn->recv(buf, sizeof(buf) - 1); if (ret < 0) { fswWarn(\"Error has occurred: (errno %d) %s\", errno, strerror(errno)); } buf[ret] = 0; ret = conn->send(response_str, sizeof(response_str) - 1); if (ret < 0) { fswWarn(\"Error has occurred: (errno %d) %s\", errno, strerror(errno)); } delete conn; } int main(int argc, char const *argv[]) { run([](void *arg) { char ip[] = \"127.0.0.1\"; Server *serv = new Server(ip, 80); serv->set_handler(handler); serv->start(); }); return 0; }","title":"TCP Server"},{"location":"websocket-server/","text":"Websocket Server Websocket Server is based on HTTP Server, so we can upgrade the protocol on the basis of HTTP Server. set_websocket_handler set websocket handler: void fsw::coroutine::http::Server::set_websocket_handler(std::string pattern, on_accept_handler fn) recv_frame recevie the frame from websocket client: void fsw::coroutine::http::Response::recv_frame(fsw::websocket::Frame *frame) send_frame send the frame to websocket client: void fsw::coroutine::http::Response::send_frame(fsw::Buffer *data) websocket example #include \"fsw/coroutine_http.h\" #include \"fsw/coroutine_http_server.h\" #include \"fsw/coroutine.h\" #include \"fsw/buffer.h\" #include \"fsw/websocket_frame.h\" using namespace fsw::coroutine::http; using fsw::Coroutine; using fsw::coroutine::http::Request; using fsw::coroutine::http::Response; using fsw::coroutine::http::Server; using fsw::Buffer; using fsw::websocket::Frame; using fsw::coroutine::run; void websocket_handler(Request *request, Response *response) { std::string data = \"hello websocket\"; while (true) { Frame frame; response->recv_frame(&frame); std::string recv_data(frame.payload, frame.payload_length); std::cout << recv_data << std::endl; Buffer send_data(data.length()); send_data.append(data); response->send_frame(&send_data); Coroutine::sleep(1); } return; } int main(int argc, char const *argv[]) { run([](void *arg) { char ip[] = \"127.0.0.1\"; Server *serv = new Server(ip, 80); serv->set_websocket_handler(\"/websocket\", websocket_handler); serv->start(); }); return 0; }","title":"Websocket Server"},{"location":"websocket-server/#websocket-server","text":"Websocket Server is based on HTTP Server, so we can upgrade the protocol on the basis of HTTP Server.","title":"Websocket Server"},{"location":"websocket-server/#set_websocket_handler","text":"set websocket handler: void fsw::coroutine::http::Server::set_websocket_handler(std::string pattern, on_accept_handler fn)","title":"set_websocket_handler"},{"location":"websocket-server/#recv_frame","text":"recevie the frame from websocket client: void fsw::coroutine::http::Response::recv_frame(fsw::websocket::Frame *frame)","title":"recv_frame"},{"location":"websocket-server/#send_frame","text":"send the frame to websocket client: void fsw::coroutine::http::Response::send_frame(fsw::Buffer *data)","title":"send_frame"},{"location":"websocket-server/#websocket-example","text":"#include \"fsw/coroutine_http.h\" #include \"fsw/coroutine_http_server.h\" #include \"fsw/coroutine.h\" #include \"fsw/buffer.h\" #include \"fsw/websocket_frame.h\" using namespace fsw::coroutine::http; using fsw::Coroutine; using fsw::coroutine::http::Request; using fsw::coroutine::http::Response; using fsw::coroutine::http::Server; using fsw::Buffer; using fsw::websocket::Frame; using fsw::coroutine::run; void websocket_handler(Request *request, Response *response) { std::string data = \"hello websocket\"; while (true) { Frame frame; response->recv_frame(&frame); std::string recv_data(frame.payload, frame.payload_length); std::cout << recv_data << std::endl; Buffer send_data(data.length()); send_data.append(data); response->send_frame(&send_data); Coroutine::sleep(1); } return; } int main(int argc, char const *argv[]) { run([](void *arg) { char ip[] = \"127.0.0.1\"; Server *serv = new Server(ip, 80); serv->set_websocket_handler(\"/websocket\", websocket_handler); serv->start(); }); return 0; }","title":"websocket example"}]}